from typing import Dict, Optional, Union

from PyQt5.QtWidgets import QButtonGroup, QGroupBox, QLayout, QRadioButton, QVBoxLayout

RadioKey = Union[str, int]


class RadioGroup:
    """
    Visible Representation of a Radio Box,

    helps to keep an order with Radio Boxes without having to think
    about them too much
    """

    box: QGroupBox
    layout: QLayout
    button_group: QButtonGroup
    radios: Dict[RadioKey, QRadioButton]
    _id_to_key_mapping: Dict[int, RadioKey]

    def __init__(self, label: str, layout: Optional[QLayout] = None):
        self.box = QGroupBox(label)
        if layout is None:
            layout = QVBoxLayout()
        self.layout = layout
        self.box.setLayout(self.layout)
        self.button_group = QButtonGroup()
        self.radios = {}
        self._id_to_key_mapping = {}

    def add_radio_button(
        self, label: str, id_: Optional[int] = None, key: Optional[RadioKey] = None
    ) -> QRadioButton:
        """
        Simply add a Radio Button to the Group

        Args:
            label: The user visible radio button
            id_: the id used with the QButtonGroup, if None
                 it will be auto generated by QButtonGroup
            key: An key used to identify the radio button, if None
                 the id_ will be used

        Returns:
            The created Radio button
        """

        radio_button = QRadioButton(label)
        if id_ is not None:
            self.button_group.addButton(radio_button, id_)
        else:
            self.button_group.addButton(radio_button)
            id_ = self.button_group.id(radio_button)
        if key is None:
            key = id_
        self._id_to_key_mapping[id_] = key
        self.layout.addWidget(radio_button)
        return radio_button

    def get_selected(self) -> Optional[RadioKey]:
        return self._id_to_key_mapping.get(self.button_group.checkedId())
